1. "Внедрение зависимости" (DI) - это паттерн программирования, который позволяет передавать зависимости объекту извне, вместо того чтобы создавать их самостоятельно.

2. DI применяется для упрощения разработки, повышения гибкости и переиспользования кода. Он помогает устранить сильные зависимости между компонентами системы, делая код более тестируемым, модульным и расширяемым.

3. Ninject - это инструмент (фреймворк) для внедрения зависимостей (DI) в приложениях на платформе .NET. Он предоставляет механизм автоматического создания и связывания объектов, основываясь на их зависимостях.

4. Для подключения и конфигурации Ninject в ASP.NET-приложении необходимо выполнить следующие шаги:
   - Установить пакет Ninject через NuGet.
   - Создать класс, реализующий интерфейс `NinjectModule`, и определить биндинги зависимостей в методе `Load()` этого класса.
   - В классе `Global.asax.cs` вызвать метод `NinjectWebCommon.Start()` в методе `Application_Start()`.
   - В файле `App_Start\NinjectWebCommon.cs` настроить создание ядра Ninject и его конфигурацию.

5. DI в ASP.NET-приложении может быть выполнено различными способами, включая конструкторную инъекцию, инъекцию через свойства (property injection) и инъекцию через методы (method injection). Существует также возможность использования атрибутов для указания зависимостей.

6. Четыре вида DI, которые позволяет сделать Ninject в ASP.NET-приложении:
   - Transient - каждый раз, когда запрашивается зависимость, Ninject создает новый экземпляр объекта.
   - Singleton - Ninject создает только один экземпляр объекта для всех запросов зависимостей.
   - Request - Ninject создает один экземпляр объекта для каждого HTTP-запроса в ASP.NET-приложении.
   - Thread - Ninject создает один экземпляр объекта для каждого потока в приложении.

7. "Хэлпер" (helper) - это класс или компонент, который предоставляет удобные методы или функциональность для выполнения повторяющихся задач или обработки данных. Он помогает упростить код и повысить его читаемость и поддерживаемость.

8. При разработке внутренних и внешних хэлперов обычно следуют следующей последовательности:
   - Разрабатывается внутренний хэлпер, который встраивается непосредственно в приложение и используется для решения его конкретных задач.
   - При необходимости обобщения функциональности внутренний хэлпер может быть преобразован в внешний хэлпер, который может быть переиспользован в других проектах или компонентах.

9. Некоторые стандартные хэлперы, входящие в состав ASP.NET:
   - `UrlHelper` - предоставляет методы для генерации URL-адресов.
   - `HtmlHelper` - предоставляет методы для генерации HTML-кода.
   - `ValidationHelper` - предоставляет методы для выполнения проверок и валидации данных.
   - `HttpUtility` - предоставляет методы для работы с HTTP-запросами и кодирования/декодирования данных.